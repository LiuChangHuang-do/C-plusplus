指针，存储地址用的，在C++中地址通常用&符号娶到
1.初始化指针，数据类型 *变量名; 赋值：数据类型 *变量名 = &变量名;这个*可以紧贴数据类型也可以紧贴变量名。数据类型 * 是指向数据类型的一种指针
2.如果要创建多个指针，要 数据类型 *变量1，*变量2
3.指针的内存大小，32 位	4 字节
64 位	8 字节。
4.使用指针的时候，一般会进行初始化赋值，nullptr.
5.可以通过*解引用的方式将指针指向的内存里的值拿出来。
6.new分配内存，new是在堆区中使用的一段内存空间，使用new运算符后，其返回形式是这个变量的地址，但是要进行手动释放要使用delete,new和delete是配套使用,delete掉空指针无害
7.new初始化方式，new 数据类型（值），初始化数组new 数据类型[size]{值1，值2，....}
8.delete ,释放由new创建的内存，对于普通的指针数据类型，直接delete 指针，对于数组，delete []指针名，在被delete后其指针仍然存在，因为指针等其他变量是存储在栈区
由内存自动释放，delete之后指针依然存在，其指向是不确定的，这很危险，因此通常我们在delete完之后要将指针初始化为nullptr
9.指针自增，其指针指向下一个地址，通常用于数组的操作，将指针变量加一后，其增加的值等于指向的数据类型占用的字节数，sizeof()用于数组名的话获取的是整个数组的大小，用于指针得到的是指针
的内存大小
类型	语法形式	指针本身是否可变	指向的值是否可变	通俗记忆
常量指针	const int* p	✅ 可以改变	❌ 不可改变	指针指向「常量值」
指针常量	int* const p	❌ 不可改变	✅ 可以改变	指针是个「常量」
常量指针常量	const int* const p	❌ 不可改变	❌ 不可改变	指针和值都不能变
10.二级指针，因为指针是一个对象（有内存，可分配地址），所以可以定义指针的指针，语法: type **p2 = &p1; p1，p2是一个指针，p2存放了p1的地址，解引用p2得到的是p1指针，再进行解引用得到所指的对象里的数据值
11.学会智能指针，上面的普通指针可以不用学
