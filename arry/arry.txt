1.数组是存储相同数据类型的一个连续的内存空间
2.定义方式：数据类型 数组名 [];
3.初始化：通常使用初始化列表的方式{}，只有在定义数组的时候才能初始化数组，不能将一个数组赋值给另一个数组，如果[]里为空，则数组的大小为初始化列表里元素的个数，如果只将数组的一部分
元素初始化，则其他元素会被编译器初始化为0;
4.数组可通过索引获取数组里的元素，也可以通过索引给数组里每个位置赋值，索引从0开始；
5.sizeof()方法可以获取数据类型和数据对象的字节大小，用于数组的时候得到的是整个数组空间的大小，sizeof(数组名)/sizeof(数组名[索引])获取的是数组里元素的个数，
索引 = sizeof(数组名)/sizeof(数组名[索引]) - 1，可以通过索引访问和修改数组里的元素；
6.数组名，数组名就是数组的首地址，每个元素的地址间隔为其数据类型的字节大小,可以通过解引用的方式获取数组的首元素；
7.数组的常见访问方式：1.for循环便利 2.指针遍历 3.for循环范围遍历，这是C++新的方式
for(auto a : arry)
{
    ......
}
这里a会得到arry里的每个元素，会进行迭代更新直到容器里最后一个元素结束；
推荐场景：顺序遍历容器且无需索引，或仅需读取 / 修改元素。
不适用场景：
需要反向遍历（使用rbegin()/rend()）。
需要访问当前元素的索引。
需要在循环中动态调整容器大小。
8.基于范围的for循环：
for(声明 ： 范围)
{
.....
}
声明：通常使用auto自动推导数据类型，需明确是否使用引用（&）或常量引用（const&）；
范围：STL，数组，初始化列表等
int arry[] = {1,2,3};
for(auto num : arry){
    num++;//此时num只是原arry里元素的一个副本，++操作没有修改原arry里的元素

}
for(auto &num : arry)
{
    num++;//此时不是副本，指向了arry里的每个元素，修改了arry里的值
}
for(const auto &num :arry)
{
 //高效读取容器里的元素，避免了内存开销，同时是只读模式；
}
二 二位维组
1 二维数组简单来说就是数组的数组，定义形式 数据类型 数组名[][];
直观书写形式 int a[3][3] = {{1,2,3},{4,5,6},{7,8,9}};这是直接的初始化方法，第一个括号代表大数组里的元素个数，这里的元素变成了一个个小数组，第二个中括号代表嵌套里的小数组的
元素个数；
2 数组名，a就是二维数组的首地址也代表嵌套里的第一个小数组，a[0][0]此时是第一个嵌套数组里的第一个元素，也是数组的首地址,因此二维数组的地址可以表示为数组名 或者 数组名[0][0]
3 与一维数组一样可以同样使用下标索引对二维数组访问，和赋值
4 二维数组通常使用for循环嵌套访问
int arry[a][b];
for(i = 0 ; i < a ;i++)
{
    for(j = 0; j < b ; j++)
    {
        //循环体
    }
}
5 数组名在C++编译器中会被默认看成一种地址，在某些情况下会被退化看成一种指针;
6.数组名是数组的首地址，如果对数组名取地址运算符，得到的是整个数组的地址，本质上地址相同，但是在进行递增操作的时候就不同了
int arr[] = {1,2,3};
int *p1 = arr;等价于&arr[0]
int *p2 = &arr;
在对p1进行++操作的时候，p1是指向int的一个指针，操作时增加四个字节，然而p2得到的是增个数组的地址，数据类型是int (*)arr 是指向数组的指针，它的内存空间为12byte,加加操作使其增加12byte
7.数组指针必须用括号 (*p)[N]，否则会变成指针数组

数组名规则，不同场景下的规则
大多数情况（如赋值、传参）	衰减为指向首元素的指针	int* p = arr;（arr 是 int [] 时）
作为sizeof操作数	代表整个数组，计算总字节数	sizeof(arr) 得到数组总大小
作为&操作数	代表整个数组，得到指向数组的指针	int(*p)[3] = &arr;（arr 是 int [3] 时）
范围 for 循环中（不用引用）	子数组衰减为指向其首元素的指针	多维数组第一层不用引用会报错
范围 for 循环中（用引用）	保持数组类型（避免衰减）	多维数组第一层用引用可正确遍历
数组的地址，数组名即为数组地址指向数组里的第一个元素，如有一个一维数组 int arr[5] 其arr是指针，指向第一个元素，其形式可以表述为 int * p = &arr[0];数据类型是int *
定义数组的时候，器数组的数据类型就是 数据类型 [],如果对数组名取地址，得到的是整个数组的地址，其也是指向第一个元素但是指针的数据类型就变了变为 int (*) [] p = &arr == &arr[0](值是一样的);
对于多维数组，我们还是定义一个数组吧，int arr[3][4] arr是指向二维数组的第一个原素，数据类型为int (*) [4] 默认对其加加操作会跳过一行进入另一个小数组，但是其实它也指向小数组的第一个元素，如果要对小元素加加（移动）我们先获取多维的第一个元素的地址如 &arr[0][0]再进行加加
注意他们的值都相同，但是类型不同！！！在传参和进行加加操作会有很大影响











