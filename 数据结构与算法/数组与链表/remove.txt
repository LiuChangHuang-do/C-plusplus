要想删除序列中的元素，特别是数组我们通常通过移动数组元素进行值覆盖的方式，这种方式适合只删除一个元素，
而且要移动很多元素，时间效率是下降的，既然remove元素这么重要，那我们实现一下正常的删除方式！
代码:数组中正常地删除一个元素
void remove(int index,int *arry,int size){
	for(int i = index;i < size - 1; i++){
	arry[i] = arry[i + 1];//循环条件结束不对，容易造成越界操作
	}
}
快速方法：也叫快指针，慢指针协同操作，慢指针构造新的数组，快指针用于遍历整个数组，当找到不是要删除的元素将这个值赋值给慢指针的位置（其实就是对同一个数组重新进行赋值操作），这个方法适用上面的单个删除元素，速度也快，不过理解起来有难度，直接上代码！！！
int remove(int size,int *arry,int tar){
  auto slow = 0;
  for(auto fast = 0; fast < size; fast++){
  if(arry[fast] != tar){
  arry[slow] = arry[fast];
  slow++;//其实针对数组和其他序列的容器，我们最多的操作方法都是索引
  }
  return slow;//返回新的数组的大小，到此，新的数组构建完毕而且空间复杂度低，时间复杂度也是。
}
学习文章：代码随想录
